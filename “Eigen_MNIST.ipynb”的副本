{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"“Eigen_MNIST.ipynb”的副本","provenance":[{"file_id":"1hz8emdiEWkV39rAJGj0QZkDAHEZ0Gsgk","timestamp":1614261593119},{"file_id":"1GcOY8MNuP8yqpl-pWAD_Ekh8-mBqjunK","timestamp":1613430364313}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"9RdmVrh4M5VI"},"source":["# EECS 504 Homework 1\n","## Problem 2: Eigen-MNIST\n","\n","We'll be exploring the images-as-points concept of eigenfaces from Lecture 2, applied to the task of classifying handwritten digits from the MNIST dataset.\n","\n","### Getting Started\n","Make your own copy of this notebook using **File -> Save a copy in Drive**, or if you have iPython installed locally, **File -> Download .ipynb** to do the exercises locally.\n","\n","### Submitting\n","When you're ready to submit this problem, first run all of the code to ensure your outputs are included in the submission. Save the `.ipynb` file and submit it to Canvas as `HW1.2_<uniqname>.ipynb`, substituting your uniqname. Be sure your name, uniqname, and UMID are correct in the form fields below. If you want to preview how it will look when we grade it, we'll run a command similar to the one below:\n","\n","`ipython nbconvert --to html HW1.2_<uniqname>.ipynb`\n"]},{"cell_type":"code","metadata":{"cellView":"form","id":"YaCvEC88cNjx"},"source":["#@title Grading information\r\n","Name = 'Yuan Cheng' #@param {type: 'string'}\r\n","Uniqname = 'yuacheng' #@param {type: 'string'}\r\n","UMID = '06358288' #@param {type: 'string'}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZcAA1q6RNIrf"},"source":["# Setup\n","\n","Run the following cells to import and download the modules and data you'll need."]},{"cell_type":"code","metadata":{"id":"NhnK-9W8NEMy"},"source":["%matplotlib inline\n","import cv2\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import scipy.signal\n","from google.colab.patches import cv2_imshow\n","from sklearn.datasets import fetch_openml\n","from sklearn.model_selection import train_test_split\n","import IPython\n","from __future__ import print_function\n","from IPython.display import display, Image\n","from PIL import Image\n","from urllib.request import urlretrieve\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZgkZKATQRVu8"},"source":["## Load data"]},{"cell_type":"code","metadata":{"id":"U35TtEqLWwG7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614254791147,"user_tz":-480,"elapsed":35472,"user":{"displayName":"Yuan Cheng","photoUrl":"","userId":"13810611575650542050"}},"outputId":"c173ad0a-f37d-4bec-f1d1-d7a3eb3469bc"},"source":["mnist = fetch_openml('mnist_784', cache=False)\n","\n","x_train_raw = mnist.data.astype('float32')[:2000]/255\n","y_train = mnist.target.astype('int64')[:2000]\n","\n","x_test_raw = mnist.data.astype('float32')[2000:2500]/255\n","y_test = mnist.target.astype('int64')[2000:2500]\n","\n","# Normalize to zero mean so covariance is just matrix multiplication\n","mean = np.mean(x_train_raw, axis=0, keepdims=True)\n","x_train = x_train_raw - mean\n","x_test = x_test_raw - mean"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[5 0 4 ... 5 2 0]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"uXFHi6owRYG9"},"source":["## Compute new basis\r\n","\r\n","To compute the eigen-images, we find the first `n` eigenvectors of the covariance matrix $\\Sigma = X^TX$. Use `np.linalg.eig` to find the eigenvectors and eigenvalues of a matrix."]},{"cell_type":"code","metadata":{"id":"GzrYytPXbGqX"},"source":["def compute_basis(data, n=300):\n","  \"\"\"This functions computes the top n eigenvectors of the covariance matrix of \n","  data and returns it \"\"\"\n","  # ===============================================\n","  # TODO: replace pass with your code\n","  covariance_matrix = np.dot(np.transpose(data),data)\n","  eigvals,eigvects = np.linalg.eig(np.mat(covariance_matrix))\n","  eigvals_sorted_ascend = np.argsort(eigvals)                    \n","  eig_sorted_ascend = eig_valind[:-(n+1):-1] \n","  eigenvectors = eigvects[:,eig_sorted_ascend]\n","  # ===============================================\n","  return eigenvectors\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jdZuCsZGOJAL"},"source":["## Visualize eigenvectors\r\n","\r\n","Run this cell to view the first ten basis images discovered by `compute_basis`."]},{"cell_type":"code","metadata":{"id":"ejpZlgpKbcp4","colab":{"base_uri":"https://localhost:8080/","height":150},"executionInfo":{"status":"ok","timestamp":1614249055301,"user_tz":-480,"elapsed":38133,"user":{"displayName":"Yuan Cheng","photoUrl":"","userId":"13810611575650542050"}},"outputId":"0755d994-90d7-4369-9555-7bc195fae0d9"},"source":["eigenvectors = compute_basis(x_train, n=300)\n","fig, ax = plt.subplots(1,10, figsize=(50,50))\n","for i,a in enumerate(ax):\n","  a.set_axis_off()\n","  a.imshow(np.reshape(eigenvectors[:,i], (28,28)))"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3600x3600 with 10 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"WRvwFxmCOWML"},"source":["## Change basis of dataset\n","\n","In this function, you will convert a data matrix X (N-by-d, where N is the number of data samples and d is the dimensionality of the data) to a new basis V (n-by-d, where n is the number of basis vectors). Recall that V is unitary: $U^TU = UU^T = I$ and the new matrix we desire, X', is N-by-n and has $X \\approx UX'$. The approximation is exact if n = d."]},{"cell_type":"code","metadata":{"id":"z-Dmve8AUwUd"},"source":["def change_basis(data_matrix, eigenvectors):\n","  I_eig = data_matrix * eigenvectors\n","  return I_eig\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rA1xTJeh4eHF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614253358039,"user_tz":-480,"elapsed":884,"user":{"displayName":"Yuan Cheng","photoUrl":"","userId":"13810611575650542050"}},"outputId":"3f10056d-8157-4931-f538-7b91de131e0c"},"source":["eig_train_x = change_basis(x_train, eigenvectors)\n","eig_test_x = change_basis(x_test, eigenvectors)\n","def euclidean_distance(row1, row2):\n","  dist_vec = row1 - row2\n","  dist = np.sum(np.square(dist_vec))\n","  return dist\n","\n","print(euclidean_distance(eig_test_x[1,:], eig_train_x[1,:]))\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["97.478325\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7ADBmhSsSmBk"},"source":["## Make predicitions using KNN \r\n","\r\n","Next, use a k-nearest-neighbors approach to classify each of the test samples. For each sample in `eig_test_x`, do the following:\r\n","1. Find the distance from this sample to each sample in `eig_train_x`.\r\n","2. Identify the `k` nearest samples from `eig_train_x` and note their indices.\r\n","3. Look up the labels associated with those `k` samples in `y_train` and find the most common one among them. Break ties however you wish.\r\n","4. Your predicted label for this test sample is that label. Store it in `predictions`."]},{"cell_type":"code","metadata":{"id":"yhhTgpq2UocO"},"source":["import operator\n","def knn_predict(eig_train_x, eig_test_x, y_train, y_test, k):\n","  \"\"\"Implement the KNN algorithm. The output should be a vector containing your predictions\"\"\"\n","  predictions = np.zeros_like(y_test)\n","  row_test = eig_test_x.shape[0]\n","  row_train = eig_train_x.shape[0]\n","  for j in range(row_test):\n","    distance = []\n","    for i in range(row_train):\n","      dist = euclidean_distance(eig_train_x[i,:], eig_test_x[j,:])\n","      distance.append((i,dist))\n","\n","    distance.sort(key=operator.itemgetter(1))\n","    neighbors = []\n","    for x in range(k):\n","      neighbors.append(distance[x][0])\n","    #change all neighbors index to the real y train classes \n","    for i in range(len(neighbors)):\n","      neighbors[i] = y_train[neighbors[i]]\n","    #Get the most frequent element in the neighbor list\n","    predictions[j] = most_frequent(neighbors)\n","  return predictions\n","\n","# calculate the Euclidean distance between two vectors\n","def euclidean_distance(row_1, row_2):\n","  dist_vec = row_1 - row_2\n","  dist = np.sum(np.square(dist_vec))\n","  dist = np.sqrt(dist)\n","  return dist\n","\n","def most_frequent(input):\n","  unique_classes = set(input)\n","  return max(unique_classes, key = input.count) \n","# knn = KNeighborsClassifier(n_neighbors=10).fit(eig_train_x, y_train)\n","# predictions = knn.predict(eig_test_x)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SkJBRFeJTRbH"},"source":["## Test It Out\r\n","Run the cell below to verify your implementation. If everything is done correctly, you should get at least 80% accuracy for `k`=1."]},{"cell_type":"code","metadata":{"id":"RLMxayXQuAtp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614259234534,"user_tz":-480,"elapsed":31335,"user":{"displayName":"Yuan Cheng","photoUrl":"","userId":"13810611575650542050"}},"outputId":"7d3d4f7d-770a-419d-ad3e-27a663973bcc"},"source":["predictions = knn_predict(eig_train_x, eig_test_x, y_train, y_test, k=10)\n","accuracy = np.sum(predictions == y_test)/y_test.size\n","print(\"Accuracy: \", accuracy*100, \"%\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy:  90.4 %\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-0MAYPCiN7PQ"},"source":["## The Effect of k\r\n","\r\n","Using the above code as a guide, find the accuracy of the KNN eigen-images algorithm for values of k betwen 1 and 10. Print or plot them and comment on any trend you see. "]},{"cell_type":"code","metadata":{"id":"RnSg59z9YWbJ","colab":{"base_uri":"https://localhost:8080/","height":296},"executionInfo":{"status":"ok","timestamp":1614261463604,"user_tz":-480,"elapsed":286123,"user":{"displayName":"Yuan Cheng","photoUrl":"","userId":"13810611575650542050"}},"outputId":"bd9a16a0-4912-412e-bc31-b02455c7b345"},"source":["Accuracy = []\r\n","for k in range(1,11):\r\n","  predictions = knn_predict(eig_train_x, eig_test_x, y_train, y_test, k=k)\r\n","  accuracy = np.sum(predictions == y_test)/y_test.size\r\n","  Accuracy.append(accuracy)\r\n","\r\n","plt.plot([1,2,3,4,5,6,7,8,9,10], Accuracy)\r\n","plt.xlabel('K Values')\r\n","plt.ylabel('Accuracy')\r\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Accuracy')"]},"metadata":{"tags":[]},"execution_count":64},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}